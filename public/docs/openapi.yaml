openapi: 3.0.3
info:
  title: 'Knowledge Management System API'
  description: 'This documentation aims to provide all the information you need to work with our API.'
  version: 1.0.0
servers:
  -
    url: 'http://localhost'
paths:
  /api/v1/articles:
    get:
      summary: 'Get a list of articles'
      operationId: getAListOfArticles
      description: ''
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - Article
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                page:
                  type: integer
                  description: ''
                  example: 18
                  nullable: false
                per_page:
                  type: integer
                  description: ''
                  example: 8
                  nullable: false
                search:
                  type: string
                  description: ''
                  example: voluptatem
                  nullable: true
              required:
                - page
                - per_page
    post:
      summary: 'Create a new article'
      operationId: createANewArticle
      description: ''
      parameters: []
      responses: {  }
      tags:
        - Article
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  description: ''
                  example: eos
                  nullable: false
                content:
                  type: string
                  description: ''
                  example: ut
                  nullable: false
                status:
                  type: string
                  description: ''
                  example: published
                  nullable: false
                  enum:
                    - draft
                    - published
              required:
                - title
                - content
                - status
  '/api/v1/articles/{id}':
    get:
      summary: 'Get a single article'
      operationId: getASingleArticle
      description: ''
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - Article
    put:
      summary: 'Update an article'
      operationId: updateAnArticle
      description: ''
      parameters: []
      responses: {  }
      tags:
        - Article
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  description: ''
                  example: quis
                  nullable: false
                content:
                  type: string
                  description: ''
                  example: sint
                  nullable: false
                status:
                  type: string
                  description: ''
                  example: draft
                  nullable: false
                  enum:
                    - draft
                    - published
              required:
                - title
                - content
                - status
    delete:
      summary: 'Delete an article'
      operationId: deleteAnArticle
      description: ''
      parameters: []
      responses: {  }
      tags:
        - Article
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the article.'
        example: blanditiis
        required: true
        schema:
          type: string
  /api/v1/auth/register:
    post:
      summary: 'Register a new user'
      operationId: registerANewUser
      description: ''
      parameters: []
      responses: {  }
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: ecrwssnsmxjijson
                  nullable: false
                email:
                  type: string
                  description: 'Must be a valid email address. Must not be greater than 255 characters.'
                  example: dusty99@example.com
                  nullable: false
                password:
                  type: string
                  description: 'Must be at least 8 characters.'
                  example: 'T[)J},cJEk\;J'
                  nullable: false
                password_confirmation:
                  type: string
                  description: ''
                  example: quas
                  nullable: false
              required:
                - name
                - email
                - password
                - password_confirmation
      security: []
  /api/v1/auth/login:
    post:
      summary: 'Login a user'
      operationId: loginAUser
      description: ''
      parameters: []
      responses: {  }
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: 'Must be a valid email address.'
                  example: bogisich.weldon@example.com
                  nullable: false
                password:
                  type: string
                  description: ''
                  example: '.%&77fK(:eXp![>-'
                  nullable: false
              required:
                - email
                - password
      security: []
  /api/v1/categories:
    get:
      summary: 'Get a list of categories'
      operationId: getAListOfCategories
      description: ''
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - Category
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                page:
                  type: integer
                  description: ''
                  example: 11
                  nullable: false
                per_page:
                  type: integer
                  description: ''
                  example: 19
                  nullable: false
                search:
                  type: string
                  description: ''
                  example: placeat
                  nullable: true
              required:
                - page
                - per_page
    post:
      summary: 'Create a new category'
      operationId: createANewCategory
      description: ''
      parameters: []
      responses: {  }
      tags:
        - Category
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: svnzjoxgvmaesfchpv
                  nullable: false
                description:
                  type: string
                  description: ''
                  example: 'Praesentium voluptates accusantium quos magni.'
                  nullable: true
              required:
                - name
  '/api/v1/categories/{id}':
    get:
      summary: 'Get a single category'
      operationId: getASingleCategory
      description: ''
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - Category
    put:
      summary: 'Update a category'
      operationId: updateACategory
      description: ''
      parameters: []
      responses: {  }
      tags:
        - Category
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: iftixhmlbnvgj
                  nullable: false
                description:
                  type: string
                  description: ''
                  example: 'Quod quia omnis sunt similique debitis qui libero qui.'
                  nullable: true
              required:
                - name
    delete:
      summary: 'Delete a category'
      operationId: deleteACategory
      description: ''
      parameters: []
      responses: {  }
      tags:
        - Category
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the category.'
        example: cupiditate
        required: true
        schema:
          type: string
  /api/user:
    get:
      summary: ''
      operationId: getApiUser
      description: ''
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - Endpoints
      security: []
  /api/v1/tags:
    get:
      summary: 'Get a list of tags'
      operationId: getAListOfTags
      description: ''
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - Endpoints
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                page:
                  type: integer
                  description: ''
                  example: 9
                  nullable: false
                per_page:
                  type: integer
                  description: ''
                  example: 6
                  nullable: false
                search:
                  type: string
                  description: ''
                  example: necessitatibus
                  nullable: true
              required:
                - page
                - per_page
      security: []
    post:
      summary: 'Create a new tag'
      operationId: createANewTag
      description: ''
      parameters: []
      responses: {  }
      tags:
        - Endpoints
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: ''
                  example: odit
                  nullable: false
                description:
                  type: string
                  description: ''
                  example: 'Quia qui distinctio at.'
                  nullable: true
              required:
                - name
      security: []
  '/api/v1/tags/{id}':
    get:
      summary: 'Show a tag'
      operationId: showATag
      description: ''
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - Endpoints
      security: []
    put:
      summary: 'Update a tag'
      operationId: updateATag
      description: ''
      parameters: []
      responses: {  }
      tags:
        - Endpoints
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: ''
                  example: quidem
                  nullable: false
                description:
                  type: string
                  description: ''
                  example: 'In tempore repellat eaque deserunt quos.'
                  nullable: true
              required:
                - name
      security: []
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the tag.'
        example: enim
        required: true
        schema:
          type: string
tags:
  -
    name: Article
    description: "\nAPIs for managing articles"
  -
    name: Auth
    description: "\nAPIs for managing authentication"
  -
    name: Category
    description: "\nAPIs for managing categories"
  -
    name: Endpoints
    description: ''
